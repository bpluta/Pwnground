//
//  ExploitingLevelScene.swift
//  Pwnground
//
//  Created by Bart≈Çomiej Pluta
//

import SwiftUI
import Combine

class ExploitingLevel: PwngroundLevelSetup, ApplicationUILevel {
    let scene: PwngroundScene.Scene = .finalExploitation
    
    var viewModel = ApplicationUIView.ViewModel()
    
    var interactors: InteractorContainer
    
    var user: SystemUser
    
    var hasBeenCompleted = false
    var didDisplayHelpSheet = false
    
    var initialPayload: Data? {
        PayloadProvider.paddedValuesPayload +
        PayloadProvider.addressPayload +
        PayloadProvider.fullShellCode
    }
    
    var levelPassPublisher: AnyPublisher<Void, Never> { levelPassSubject.eraseToAnyPublisher() }
    var levelPassSubject = PassthroughSubject<Void, Never>()
    
    func checkSolution(for value: String) -> AnyPublisher<Bool, Never> {
        Empty().eraseToAnyPublisher()
    }
    
    private var solutionCheckerCancellable: AnyCancellable?
    
    init(user: SystemUser) {
        let operatingSystem = OperatingSystem.pwngroundOperatingSystem(with: user)
        self.user = user
        self.interactors = InteractorContainer.pwngroundInteractors(
            operatingSystem: operatingSystem,
            user: user
        )
        setupSolutionChecker()
    }
    
    func setupSolutionChecker() {
        solutionCheckerCancellable = interactors.operatingSystemInteractor
            .systemGroupsUpdates
            .sink { [weak self] groups in
                guard let user = self?.user,
                      let winnerGroup = groups.first(where: { $0.gid == ScholarshipApp.wwdcScholarsGroupId }),
                      winnerGroup.users.contains(where: { $0.name == user.name })
                else { return }
                self?.levelPassSubject.send(())
            }
    }
    
    func solve() {
        viewModel.solutionSubject.send([
            initialPayload,
            "listgroups".data(using: .utf8),
            "assigntogroup wwdc \(user.name)".data(using: .utf8)
        ].compactMap { $0 })
    }
}

struct ExploitingLevelScene: View {
    let model: ExploitingLevel
    
    var body: some View {
        ApplicationUIView(viewModel: model.viewModel)
            .environment(\.levelSetup, model)
            .environment(\.interactors, model.interactors)
    }
}
